# Task 1.Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# my_list = ['Aleksandr', 200, True, 3.14, False, -8, -0, 'Name']
# i = 0
# while i < len(my_list):
#     print(f'{i}-й элемент листа', type(my_list[i]))
#     i = i + 1





# Task 2 . Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с
# индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input()
# title = input('введиете элементы списка через пробел: ')
# my_list = title.split()
# print(my_list)
# print(f'Количество пар в листе: {int(len(my_list)/2)}')
# item = 0
# i = 0
# while i < int(len(my_list)/2):
#   my_list[item], my_list[item+1] = my_list[item+1], my_list[item]
#   item += 2
#   i += 1
# print(my_list)





# Task 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц
# (зима, весна, лето, осень). Напишите решения через list и через dict.

# weather = ['зима', 'весна', 'лето',  'осень']
# month = int(input('Введите порядковый номер месяца: '))
# if month ==1 or month == 12 or month == 2:
#         print(weather[0])
# elif month == 3 or month == 4 or month ==5:
#     print(weather[1])
# elif month == 6 or month == 7 or month == 8:
#     print(weather[2])
# elif month == 9 or month == 10 or month == 11:
#     print(weather[3])


# weather = {1: 'зима', 2: 'зима', 3: 'весна', 4: 'весна', 5: 'весна', 6: 'лето', 7: 'лето', 8: 'лето', 9: 'осень', 10: 'осень', 11: 'осень', 12: 'зима'}
# month = int(input('Введите порядковый номер месяца: '))
# print(weather[month])





# Task 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

# title = input('введите строку из нескольких слов, разделённых пробелами.: ')
# my_list = title.split()
# print(my_list)
# print(f'Количество слов: {len(my_list)}')
# i = 1
# for qwe in my_list:
#     print(f'{i}-е слово, {qwe[:10]}')
#     i += 1




# Task 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми
# значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

# my_list = [7, 5, 5, 3, 2]
# print(f"Текущий рейтинг - {my_list}")
# num = input("Введите число (q - выход): ")
# while num != 'q':
#     num = int(num)
#     for qwe in range(len(my_list)):
#         if my_list[qwe] == num:
#             my_list.insert(qwe + 1, num)
#             break
#         elif my_list[0] < num:
#             my_list.insert(0, num)
#         elif my_list[-1] > num:
#             my_list.append(num)
#         elif my_list[qwe] > num and my_list[qwe + 1] < num:
#             my_list.insert(qwe + 1, num)
#             break #иначе добавит 2 раза
#     print(f"текущий рейтинг - {my_list}")
#     num = input("Введите число: ")





# Task 6. Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и
# словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }
goods = []
item = {'название': '', 'цена': '', 'количество': '', 'eд': ''}
analytic = {'название': [], 'цена': [], 'количество': [], 'eд': []}
num = 0
while True:
    choice = input('Для выхода "q", Для продолжения "Enter", для аналитики "a"')
    if choice == 'q':
        break
    num += 1
    if choice == 'a':
        print(f'\n Подробный список')
        for ind, qwe in enumerate(goods):
            print(ind + 1, qwe)
        print(f'\n Текущая аналитика')
        for key, value in analytic.items():
            print(f'{key}: {value}')
    for var in item.keys():
        answer = input(f'Введите "{var}" ')
        item[var] = int(answer) if (var == 'цена' or var == 'количество') else answer
        analytic[var].append(item[var])
    goods.append(str(item)) #без перевода в строку выдавал постоянно одинаковые (последнее значение), не смог победить


